{
	// Place your chaintrap-ifw workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"svelte new component" : {
		"scope": "svelte",
		"description": "Default structure for a chaintrap svelte component",
		"prefix": "<script",
		"body": [
			"<script>",
			"// --- lib deps",
			"// --- framework",
			"// import { onMount , setContext, getContext, onDestroy } from 'svelte'",
			"// --- external components",
			"// --- components",
			"// --- app lib",
			"import { getLogger } from '$$lib/log.js'",
			"// --- app stores",
			"// --- constants",
			"const log = getLogger('${TM_FILENAME_BASE}')",
			"// --- data imports",
			"// --- component properties",
			"// --- component state properties",
			"// --- svelte bound variables",
			"// let instance = undefined",
			"// --- svelte lifecycle callbacks",
			"// test support hook",
			"// onMount(async () => {})",
  			"// --- on dom event callbacks",
  			"// --- contract state callbacks",
  			"// --- component helpers",
			"</script>",
			"<style>",
			"</style>"
		]
	},
	"js new file" : {
		"scope": "javascript",
		"description": "Default structure for a chaintrap javascript file",
		"prefix": "// This file",
		"body": [
			"// This file$0",
			"// --- lib imports",
			"// --- framework imports",
			"// --- app imports",
			"import { getLogger } from '$$lib/log.js'",
			"// --- app store imports",
			"// --- const definitions",
			"const log = getLogger('${TM_FILENAME_BASE}')",
			"// --- global definitions (discouraged)"
		]
	}
}